
# Name of the Github Actions workflow
name: MAUI CI/CD
# Define the events that trigger the Github Actions workflow
on:
  push:
    branches:
      - master # Only trigger the workflow on the master branch
    paths-ignore:
      - '**/*.md' # Ignore markdown files
      - '**/*.git*' # Ignore git files
  pull_request:
    branches:
      - master # Only trigger the workflow on the master branch
  workflow_dispatch:

# Define the environment variables to be used in the Github Actions workflow
env:
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true


jobs:
  # Setup job to install .NET and MAUI workload
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        dotnet-version: [7.0.x]
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      
      # Cache NuGet packages and the .NET SDK for faster builds
      - name: Cache .NET packages
        uses: actions/cache@v1.2.1
        with:
          path: '~/.nuget/packages'
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
      
      # Install the MAUI workload
      - run: dotnet workload install maui --ignore-failed-sources
  
  # Build job to build the MAUI app for Android
  build-android:
    # Define the jobs that this job depends on
    needs: [setup]
    name: Build MAUI for Android
    runs-on: windows-latest
    strategy:
      matrix:
        os: [android-latest]
        dotnet-version: [7.0.x]
        target-framework: [net7.0-android]
    steps:
      - uses: actions/checkout@v3
      
      # Cache NuGet packages and the .NET SDK for faster builds
      - name: Cache .NET packages
        uses: actions/cache@v1.2.1
        with:
          path: '~/.nuget/packages'
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
      
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - run: dotnet build L00177804_Project/L00177804_Project.csproj -c Release -f ${{ matrix.target-framework }}
      
      - name: Create Android artifacts
        if: success()
        uses: actions/upload-artifact@v3.1.2
        with:
          name: MAUI-Android-artifacts
          path: L00177804_Project/bin/Release/net7.0-android/
          
  # Build job to build the MAUI app for ios
  build-ios:
    # Define the jobs that this job depends on
    needs: [setup]
    name: Build MAUI for IOS
    runs-on: windows-latest
    strategy:
      matrix:
        os: [macos-latest]
        dotnet-version: [7.0.x]
        target-framework: [net7.0-ios]
    steps:
      - uses: actions/checkout@v3
      
      # Cache NuGet packages and the .NET SDK for faster builds
      - name: Cache .NET packages
        uses: actions/cache@v1.2.1
        with:
          path: '~/.nuget/packages'
          key: ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-packages-
            ${{ runner.os }}-dotnet-${{ matrix.dotnet-version }}-
            ${{ runner.os }}-dotnet-
      
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - run: dotnet build L00177804_Project/L00177804_Project.csproj -c Release -f ${{ matrix.target-framework }}
      
      - name: Create IOS artifacts
        if: success()
        uses: actions/upload-artifact@v3.1.2
        with:

          name: MAUI-iOS-artifacts
          path: L00177804_Project/bin/Release/net7.0-ios/
      
  # Test job to run the unit tests

  test:
    needs: [build-android, build-ios]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v1.2.1
        with:
          path: |
            ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/xUnitTests.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore NuGet packages
        run: dotnet restore
        working-directory: ./xUnitTests
      - name: Build solution
        run: dotnet build --configuration Release --no-restore
        working-directory: ./xUnitTests
      - name: Run tests
        run: dotnet test --logger:xunit
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: |
            **/TestResults.xml

  analyze:
    needs: [build-android, build-ios]
    name: analyze
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v1.2.1
      with:
        path: |
          ~/.nuget/packages
          ./bin
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/project.assets.json') }}-${{ matrix.language }}
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore NuGet packages
      run: dotnet restore
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    - name: Build project
      run: dotnet build 
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2


  # Deploy job to deploy the MAUI app         
  deploy:
    needs: test
    if: ${{ needs.test.result == 'success' }}
    name: Deploy MAUI App
    runs-on: windows-latest
    steps:
      - name: Deploy to Playstore
        run: echo "Deploying to Playstore in progress"
  
            
      
    
