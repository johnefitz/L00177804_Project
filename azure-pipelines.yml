trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  DOTNET_NOLOGO: true                     # Disable the .NET logo
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true # Disable the .NET first time experience
  DOTNET_CLI_TELEMETRY_OPTOUT: true       # Disable sending .NET CLI telemetry

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildAndroid
    displayName: 'Build Android Job'
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: 'Setup .NET 7'
      inputs:
        packageType: 'sdk'
        version: '7.0.x'
    - script: 'dotnet workload install maui --ignore-failed-sources'
      displayName: 'Install MAUI Workload'
    - script: 'dotnet restore L00177804_Project/L00177804_Project.csproj'
      displayName: 'Restore Dependencies'
    - script: 'dotnet build L00177804_Project/L00177804_Project.csproj -c Release -f net7.0-android --no-restore'
      displayName: 'Build MAUI Android'

  - job: BuildiOS
    displayName: 'Build iOS Job'
    steps:
    - checkout: self
    - task: UseDotNet@2
      displayName: 'Setup .NET 7'
      inputs:
        packageType: 'sdk'
        version: '7.0.x'
    - script: 'dotnet workload install maui --ignore-failed-sources'
      displayName: 'Install MAUI Workload'
    - script: 'dotnet restore L00177804_Project/L00177804_Project.csproj'
      displayName: 'Restore Dependencies'
    - script: 'dotnet build L00177804_Project/L00177804_Project.csproj -c Release -f net7.0-ios --no-restore'
      displayName: 'Build MAUI iOS'

- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  jobs:
  - job: Test
    displayName: 'Test Job'
    steps:
    - script: 'dotnet test --no-build --verbosity normal'
      displayName: 'Run tests'

- stage: xunitTest
  dependsOn:
  - Build
  - Test
  displayName: 'xUnit Test'
  jobs:
  - job: xUnitSetup
    displayName: 'Setup xUnit'
    steps:
    - checkout: self
    - script: 'dotnet tool install --global dotnet-xunit'
      displayName: 'Install xUnit'
    - script: 'dotnet tool install --global coverlet.console'
      displayName: 'Install Coverlet'

  - job: xUnitTesting
    displayName: 'Run Unit Test'
    dependsOn: xUnitSetup
    steps:
    - script: dotnet test xUnitTests/xUnitTests.csproj --filter "TestCategory!=Smoke"
      displayName: 'Running Unit Tests'


- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn:
  - Build
  - Test
  - xUnitTest
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - script: 'echo "Deploying to Azure App Service"'
      displayName: 'Display message'
      condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))

  
